# version: '3.9'

services:
  postgres:
    container_name: postgres_container
    image: postgres:${POSTGRES_VERSION:-16}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sa}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123}
      POSTGRES_DB: ${POSTGRES_DATABASE:-postgres}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - ${POSTGRES_PORT:-5433}:5432
    networks:
      - microservice-network
    restart: unless-stopped

  postgres-2:
    container_name: postgres_container_2
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sa}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123}
      POSTGRES_DB: ${POSTGRES_ROUTE_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres_2
    ports:
      - ${POSTGRES_ROUTE_PORT}:5432
    networks:
      - microservice-network
    restart: unless-stopped


  redis-master:
    image: redis:6.0.7
    container_name: redis-master
    command: redis-server
    restart: always
    volumes:
      - redis_master:/data
    ports:
      - 6379:6379
    networks:
      - microservice-network

  redis-slave:
    image: redis:6.0.7
    container_name: redis-slave
    restart: always
    volumes:
      - redis_slave:/data
    ports:
      - 6479:6379
    command: redis-server --slaveof redis-master 6379
    networks:
      - microservice-network

  authentication-service:
    build: 
      context: ./authentication-service
    container_name: authentication_service 
    ports:
      - "3001:3001"
    env_file:
      - ./authentication-service/.env
    networks:
      - microservice-network
    depends_on:
      - redis-master
      - postgres
      - kafka-1
      - kafka-2
      - kafka-3

  # route-service:
  #   build: ./route-service
  #   container_name: route_service
  #   ports:
  #     - "3002:3000"
  #   env_file:
  #     - ./route-service/.env
  #   networks:
  #     - microservice-network
  #   depends_on:
  #     - postgres

  notification-service:
    build: ./notification-service
    container_name: notification_service
    ports:
      - "3003:3000"
    env_file:
      - ./notification-service/.env
    environment:
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9093,kafka-3:9094
    networks:
      - microservice-network
      - kafka-cluster-network
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-cluster-network

  kafka-1:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - kafka-cluster-network

  kafka-2:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
    networks:
      - kafka-cluster-network

  kafka-3:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9094:9094"
    networks:
      - kafka-cluster-network

  nginx:
    image: nginx:latest
    container_name: nginx_gateway
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservice-network
    depends_on:
      - authentication-service

networks:
  kafka-cluster-network:
    driver: bridge

  microservice-network:
    driver: bridge

volumes:
  postgres:
  redis_master:
  redis_slave:
